install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rjava")
install.packages("rJava")
install.packages("e1071")
install.packages("plot3D")
install.packages("ggplot2")
install.packages("RWeka")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("caret")
install.packages("rJava")
install.packages("C50")
install.packages("rJava")
install.packages("caret")
install.packages("C50")
#SVM TT tuning c y s
require(psych)
install.packages("psych")
install.packages("e1071")
install.packages("FSelector")
install.packages("pROC")
install.packages("kernlab")
install.packages("RWeka")
install.packages("kernlab")
install.packages("kknn")
library(randomForest)
library(randomForest)
install.packages("randomForest")
#JRip v37
library(rJava)
require(psych)
library(RWeka)
library(FSelector)
library(caret)# aqui voy
library(randomForest)
library(pROC)
#JRip v37
library(rJava)
require(psych)
library(RWeka)
library(FSelector)
library(caret)# aqui voy
library(randomForest)
library(pROC)
#JRip v37
library(rJava)
require(psych)
library(RWeka)
library(FSelector)
library(caret)# aqui voy
library(randomForest)
library(pROC)
semillas<-c(33833,90,2940,86203,123,789,67554,6094,47053,2098,819,8,70090,3293,110,70988,44550,110923,99099,16,19023,7007,504,222,32,3000,4593,10203,309485,909653)
install.packages("tree.bins")
install.packages("tree")
#JRip v37
library(rJava)
require(psych)
library(RWeka)
library(FSelector)
library(caret)# aqui voy
library(randomForest)
library(pROC)
install.packages("rJava")
#Código de muestra de la técnica SVM
#Se carga a librería e1071
library(e1071)
set.seed(1)
#Se generan los datos
x=matrix(rnorm(100*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
#Se hace la gráfica de los puntos generados en el plano
plot(x, col=(3-y),main="Datos mezclados",xlab="Eje X",ylab="Eje y")
#Se construye un Data.Frame
dat=data.frame(x=x, y=as.factor(y))
#Se calcula SVM para el kernel lineal
svmfit=svm(y~., data=dat, kernel="linear", cost=10)
plot(svmfit, dat)
#Se estima el modelo SVM con kernel polinomial
svmfit=svm(y~., data=dat, kernel="polynomial", cost=10)
plot(svmfit, dat)
#Se  estima el modelo SVM con el kernel sigmoid
svmfit=svm(y~., data=dat, kernel="sigmoid", cost=10)
plot(svmfit, dat)
#Se estima el modelo SVM con el kernel radial
svmfit=svm(y~., data=dat, kernel="radial", cost=10)
plot(svmfit, dat)
#Código de muestra de la técnica SVM
#Se carga a librería e1071
library(e1071)
set.seed(1)
#Se generan los datos
x=matrix(rnorm(100*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
#Se hace la gráfica de los puntos generados en el plano
plot(x, col=(3-y),main="Datos mezclados",xlab="Eje X",ylab="Eje y")
#Se construye un Data.Frame
dat=data.frame(x=x, y=as.factor(y))
#Se calcula SVM para el kernel lineal
svmfit=svm(y~., data=dat, kernel="linear", cost=10)
plot(svmfit, dat)
#Se puede revisar los valores y el resumen de los estimado en R project para el modelo SVM
svmfit$index
summary(svmfit)
#Se estima el modelo SVM con kernel polinomial
svmfit=svm(y~., data=dat, kernel="polynomial", cost=10)
plot(svmfit, dat)
#Se  estima el modelo SVM con el kernel sigmoid
svmfit=svm(y~., data=dat, kernel="sigmoid", cost=10)
plot(svmfit, dat)
#Se estima el modelo SVM con el kernel radial
svmfit=svm(y~., data=dat, kernel="radial", cost=10)
plot(svmfit, dat)
??svm
??ksvm
ksvm(y~.,data=promotergene,kernel="rbfdot",
kpar=list(sigma=0.015),C=50,cross=4)
library(knn)
library(knn)
#Código de muestra de la técnica SVM
#Se carga a librería e1071
library(e1071)
library(kknn)
svmfit=ksvm(y~.,data=promotergene,kernel="rbfdot",
kpar=list(sigma=0.015),C=50,cross=4)
library(kernlab)
svmfit=ksvm(y~.,data=promotergene,kernel="rbfdot",
kpar=list(sigma=0.015),C=50,cross=4)
svmfit=ksvm(y~.,data=dat,kernel="rbfdot",
kpar=list(sigma=0.015),C=50,cross=4)
plot(svmfit, dat)
svmfit
svmfit=ksvm(y~.,data=dat,kernel="gaussian",
kpar=list(sigma=0.015),C=50,cross=4)
plot(svmfit, dat)
#SVM TT tuning c y s
library(e1071)
library(FSelector)
library(caret)
library(pROC)
library(kernlab)
require(psych)
library(e1071)
library(FSelector)
library(caret)
library(pROC)
require(psych)
library(e1071)
library(FSelector)
library(caret)
library(pROC)
G<-c(0.001,0.01,0.1,1,10,100)
seq_along(G)
plot(x,x,xlim = c(0,10),ylim = c(0,10))
x <- seq(-10,10)
plot(x,x,xlim = c(0,10),ylim = c(0,10))
x <- seq(-10,10)
x <- seq(-10,10)
plot(x,x,xlim = c(0,10),ylim = c(0,10))
rm(list = ls())
setwd("~/Documentos/Documentos/Documentos/tesis_SGBS/Codigo_tesis_SGB/train-test/C45/script")
setwd("~/Documentos/Documentos/Documentos/tesis_SGBS/Codigo_tesis_SGB/train-test/C45/")
#Lectura del dataset
SGBPS<-read.csv("dataset/SGBVM_Temporada.csv")
names(SGBPS)
#table(SGBVM$v207)#Estado actual del paciente
table(SGBPS$v214)#Tuvo secuelas o no
SGBPS[SGBPS$v214==2,]$v214<-1
SGBPS[SGBPS$v214==3,]$v214<-1
SGBPS[SGBPS$v214==4,]$v214<-1
SGBPS<-SGBPS[(SGBPS$v214==0) | (SGBPS$v214==1),]
SGBPS<-SGBPS[,(-184)]#v207 Estado actual del paciente
SGBPS$subtipo<-as.factor(SGBPS$subtipo)
SGBPS$v5<-as.factor(SGBPS$v5)
SGBPS$v6<-as.factor(SGBPS$v6)
SGBPS$v21<-as.factor(SGBPS$v21)
SGBPS$v22<-as.factor(SGBPS$v22)
SGBPS$v23<-as.factor(SGBPS$v23)
SGBPS$v24<-as.factor(SGBPS$v24)
SGBPS$v25<-as.factor(SGBPS$v25)
SGBPS$v26<-as.factor(SGBPS$v26)
SGBPS$v27<-as.factor(SGBPS$v27)
SGBPS$v29<-as.factor(SGBPS$v29)
SGBPS$v30<-as.factor(SGBPS$v30)
SGBPS$v31<-as.factor(SGBPS$v31)
SGBPS$v32<-as.factor(SGBPS$v32)
SGBPS$v33<-as.factor(SGBPS$v33)
SGBPS$v37<-as.factor(SGBPS$v37)
SGBPS$v38<-as.factor(SGBPS$v38)
SGBPS$v214<-as.factor(SGBPS$v214)
SGBPS$Temporada<-as.factor(SGBPS$Temporada)
sapply(SGBPS[1,],class)
table(SGBPS$v214)
names(SGBPS)
as.simple.formula(names(trainingSGBPS), "v214"), data = trainingSGBPS)
as.simple.formula(names(trainingSGBPS), "v214")
library(FSelector)
as.simple.formula(names(trainingSGBPS)
as.simple.formula(names(trainingSGBPS), "v214")
names(trainingSGBPS)
inTrain = createDataPartition(SGBPS$v214,p = 2/3,list=FALSE)
trainingSGBPS = SGBPS[ inTrain,]
testingSGBPS = SGBPS[-inTrain,]
as.simple.formula(names(trainingSGBPS), "v214")
names(trainingSGBPS)
trainingSGBPS = SGBPS[ inTrain,]
inTrain = createDataPartition(SGBPS$v214,p = 2/3,list=FALSE)
library(caret)
library(caret)
inTrain = createDataPartition(SGBPS$v214,p = 2/3,list=FALSE)
trainingSGBPS = SGBPS[ inTrain,]
testingSGBPS = SGBPS[-inTrain,]
as.simple.formula(names(trainingSGBPS)
;
as.simple.formula(names(trainingSGBPS)
,"v214"
)
class(as.simple.formula(names(trainingSGBPS),"v214"))
summary(as.simple.formula(names(trainingSGBPS),"v214"))
v214~.,
v214~.
forma <- v214~.
forma
class(forma)
rm(list=ls())
